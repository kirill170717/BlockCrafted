//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.10.0
//     from Assets/Settings/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GameActionMap"",
            ""id"": ""d2e83959-1d98-4662-96e9-68c4502af5f2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8c370e72-b318-4f34-b82d-8d52da98324a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""bf00f299-afba-43c9-ab7f-38839fb78a31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a882ecf6-03d8-4b7a-bfe7-af9069e6fd72"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""ced6a42d-bff6-438d-bb39-87f33da51cc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""ad6a4632-2c00-405a-9abc-9d2598b5bf5f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveBlock"",
                    ""type"": ""Button"",
                    ""id"": ""b17a2ad4-3219-49fd-8e18-e1cb03334a11"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceBlock"",
                    ""type"": ""Button"",
                    ""id"": ""1483845c-96ec-48ce-9c5e-0f07591c658c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86d920d0-3e84-4476-8e20-07adba8e3ae8"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1dce85e0-f916-4368-b4f1-cd31684a82aa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1a6c654d-7afb-49f4-a2c3-2995a943aca6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6fb1062c-edc7-4247-a095-25d02718e987"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8d56beb5-6888-4cee-bc64-1054a55ab274"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4a146434-70fd-411f-9627-15f1c1c56a62"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fd58e3cb-c33e-4695-bb4b-2cf8d9870bdc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d578e3a-4b65-46b6-8b0f-675db78e4f7a"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a39b7b70-a356-4c34-80e5-ecc963036be0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79fec91d-094b-4190-bfe6-af67a1e35423"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4dc0f6d-a551-4472-963e-d0d21f59c732"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4079a34-d46e-4e7f-beeb-3c15fbbc2e63"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControlScheme"",
            ""bindingGroup"": ""PlayerControlScheme"",
            ""devices"": []
        }
    ]
}");
            // GameActionMap
            m_GameActionMap = asset.FindActionMap("GameActionMap", throwIfNotFound: true);
            m_GameActionMap_Movement = m_GameActionMap.FindAction("Movement", throwIfNotFound: true);
            m_GameActionMap_CameraMovement = m_GameActionMap.FindAction("CameraMovement", throwIfNotFound: true);
            m_GameActionMap_Jump = m_GameActionMap.FindAction("Jump", throwIfNotFound: true);
            m_GameActionMap_Crouch = m_GameActionMap.FindAction("Crouch", throwIfNotFound: true);
            m_GameActionMap_Sprint = m_GameActionMap.FindAction("Sprint", throwIfNotFound: true);
            m_GameActionMap_RemoveBlock = m_GameActionMap.FindAction("RemoveBlock", throwIfNotFound: true);
            m_GameActionMap_PlaceBlock = m_GameActionMap.FindAction("PlaceBlock", throwIfNotFound: true);
        }

        ~@InputControls()
        {
            UnityEngine.Debug.Assert(!m_GameActionMap.enabled, "This will cause a leak and performance issues, InputControls.GameActionMap.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameActionMap
        private readonly InputActionMap m_GameActionMap;
        private List<IGameActionMapActions> m_GameActionMapActionsCallbackInterfaces = new List<IGameActionMapActions>();
        private readonly InputAction m_GameActionMap_Movement;
        private readonly InputAction m_GameActionMap_CameraMovement;
        private readonly InputAction m_GameActionMap_Jump;
        private readonly InputAction m_GameActionMap_Crouch;
        private readonly InputAction m_GameActionMap_Sprint;
        private readonly InputAction m_GameActionMap_RemoveBlock;
        private readonly InputAction m_GameActionMap_PlaceBlock;
        public struct GameActionMapActions
        {
            private @InputControls m_Wrapper;
            public GameActionMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_GameActionMap_Movement;
            public InputAction @CameraMovement => m_Wrapper.m_GameActionMap_CameraMovement;
            public InputAction @Jump => m_Wrapper.m_GameActionMap_Jump;
            public InputAction @Crouch => m_Wrapper.m_GameActionMap_Crouch;
            public InputAction @Sprint => m_Wrapper.m_GameActionMap_Sprint;
            public InputAction @RemoveBlock => m_Wrapper.m_GameActionMap_RemoveBlock;
            public InputAction @PlaceBlock => m_Wrapper.m_GameActionMap_PlaceBlock;
            public InputActionMap Get() { return m_Wrapper.m_GameActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IGameActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @CameraMovement.started += instance.OnCameraMovement;
                @CameraMovement.performed += instance.OnCameraMovement;
                @CameraMovement.canceled += instance.OnCameraMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @RemoveBlock.started += instance.OnRemoveBlock;
                @RemoveBlock.performed += instance.OnRemoveBlock;
                @RemoveBlock.canceled += instance.OnRemoveBlock;
                @PlaceBlock.started += instance.OnPlaceBlock;
                @PlaceBlock.performed += instance.OnPlaceBlock;
                @PlaceBlock.canceled += instance.OnPlaceBlock;
            }

            private void UnregisterCallbacks(IGameActionMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @CameraMovement.started -= instance.OnCameraMovement;
                @CameraMovement.performed -= instance.OnCameraMovement;
                @CameraMovement.canceled -= instance.OnCameraMovement;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @RemoveBlock.started -= instance.OnRemoveBlock;
                @RemoveBlock.performed -= instance.OnRemoveBlock;
                @RemoveBlock.canceled -= instance.OnRemoveBlock;
                @PlaceBlock.started -= instance.OnPlaceBlock;
                @PlaceBlock.performed -= instance.OnPlaceBlock;
                @PlaceBlock.canceled -= instance.OnPlaceBlock;
            }

            public void RemoveCallbacks(IGameActionMapActions instance)
            {
                if (m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_GameActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameActionMapActions @GameActionMap => new GameActionMapActions(this);
        private int m_PlayerControlSchemeSchemeIndex = -1;
        public InputControlScheme PlayerControlSchemeScheme
        {
            get
            {
                if (m_PlayerControlSchemeSchemeIndex == -1) m_PlayerControlSchemeSchemeIndex = asset.FindControlSchemeIndex("PlayerControlScheme");
                return asset.controlSchemes[m_PlayerControlSchemeSchemeIndex];
            }
        }
        public interface IGameActionMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnCameraMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnRemoveBlock(InputAction.CallbackContext context);
            void OnPlaceBlock(InputAction.CallbackContext context);
        }
    }
}
